# -*- coding: utf-8 -*-
from aiogram import types
from aiogram.filters import Command, CommandObject

from .kernel import BotanistDispatcher

from .docxer import ReportData, docxer
from .translator import translator
from .searcher import searcher
from .catter import catter
from .musician import musician


# front-controller:
def init_handlers(dispatcher: BotanistDispatcher) -> None:
    def format_hint(format: str) -> str:
        return \
            '<b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>\n' \
            f'<code>{format}</code>'


    @dispatcher.message(Command('start'))
    async def _(msg: types.Message) -> None:
        await msg.answer(\
            'Botanist —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ.\n' \
            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–ú–µ–Ω—é</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.'
        )


    @dispatcher.message(Command('report'))
    async def _(msg: types.Message, command: CommandObject) -> None:
        rc = list(map( # report context
            str.strip, command.args.split(',') if command.args else None
        )) if command.args else ()

        try:
            report_data = ReportData(
                discipline=f'{rc[0][0].upper()}{rc[0][1:]}',
                topic=f'{rc[1][0].upper()}{rc[1][1:]}',
                student=rc[2].title(),
                teacher=rc[3].title()
            )

            await docxer.send_report(msg, report_data)
        except IndexError:
            await msg.reply(format_hint('/report –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, —Ç–µ–º–∞, —Å—Ç—É–¥–µ–Ω—Ç, –ø—Ä–µ–ø–æ–¥'))
        except Exception as unhandled_error:
            print(f'[unhandled_error][report]: {unhandled_error}')

            await msg.reply('–†–µ—Ñ–µ—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è ü§í')


    @dispatcher.message(Command('translate'))
    async def _(msg: types.Message, command: CommandObject) -> None:
        text = command.args.strip() if command.args else None

        if not text:
            await msg.reply(format_hint('/translate —Ç–µ–∫—Å—Ç'))
            return

        try:
            await msg.reply(translator.translate(text))
        except Exception as unhandled_error:
            print(f'[unhandled_error][translate]: {unhandled_error}')

            await msg.reply('–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è ü§Ø')


    @dispatcher.message(Command('wiki'))
    async def _(msg: types.Message, command: CommandObject) -> None:
        topic = command.args.strip() if command.args else None

        if not topic:
            await msg.reply(format_hint('/wiki —Ç–µ–º–∞'))
            return

        try:
            await msg.reply(searcher.surf(topic, True))
        except Exception as unhandled_error:
            print(f'[unhandled_error][wiki]: {unhandled_error}')

            await msg.reply('–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ ü•≤')


    @dispatcher.message(Command('cat'))
    async def _(msg: types.Message) -> None:
        try:
            await catter.send_random_cat_img(msg)
        except Exception as unhandled_error:
            print(f'[unhandled_error][cat]: {unhandled_error}')

            await msg.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø')


    @dispatcher.message(Command('music'))
    async def _(msg: types.Message) -> None:
        try:
            await musician.send_random_music(msg)
        except Exception as unhandled_error:
            print(f'[unhandled_error][music]: {unhandled_error}')

            await msg.reply('–ú—É–∑—ã–∫–∏ –Ω–µ –±—É–¥–µ—Ç üòì')
